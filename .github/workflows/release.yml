name: Release pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.3.8"
  JAVA_VERSION: "17"
  LC_ALL: en_US.UTF-8

permissions:
  contents: write

jobs:
  lint:
    name: Lint & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Flutter pub get
        run: flutter pub get
      - name: Flutter analyze
        run: flutter analyze
      - name: Flutter test
        run: flutter test

  android:
    name: Android build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Prepare environment file
        run: |
          if [ -n "${{ secrets.ENV_FILE }}" ]; then
            printf "%s" "${{ secrets.ENV_FILE }}" > .env
          else
            cp .env.example .env
          fi
      - name: Configure Android signing
        if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
          cat <<'PROPS' > android/key.properties
storeFile=${{ github.workspace }}/android/app/upload-keystore.jks
storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
PROPS
      - name: Flutter pub get
        run: flutter pub get
      - name: Build Android APK
        run: flutter build apk --release
      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  ios:
    name: iOS build
    runs-on: macos-13
    needs: lint
    env:
      IOS_KEYCHAIN: build.keychain
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
      - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Prepare environment file
        run: |
          if [ -n "${{ secrets.ENV_FILE }}" ]; then
            printf "%s" "${{ secrets.ENV_FILE }}" > .env
          else
            cp .env.example .env
          fi
      - name: Configure signing xcconfig
        run: |
          cat <<'XCCONFIG' > ios/Signing.xcconfig
PRODUCT_BUNDLE_IDENTIFIER=${{ secrets.IOS_BUNDLE_IDENTIFIER }}
DEVELOPMENT_TEAM=${{ secrets.IOS_TEAM_ID }}
CODE_SIGN_STYLE=Manual
CODE_SIGN_IDENTITY=iPhone Distribution
PROVISIONING_PROFILE_SPECIFIER=${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }}
XCCONFIG
      - name: Update export options
        run: /usr/libexec/PlistBuddy -c "Set :teamID ${{ secrets.IOS_TEAM_ID }}" ios/export_options_enterprise.plist
      - name: Import certificates
        if: ${{ secrets.IOS_CERTIFICATE_BASE64 != '' }}
        run: |
          security create-keychain -p "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" "$IOS_KEYCHAIN"
          security set-keychain-settings -lut 21600 "$IOS_KEYCHAIN"
          security unlock-keychain -p "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" "$IOS_KEYCHAIN"
          echo "${{ secrets.IOS_CERTIFICATE_BASE64 }}" | base64 --decode > signing.p12
          security import signing.p12 -k "$IOS_KEYCHAIN" -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security list-keychain -d user -s "$IOS_KEYCHAIN" $(security list-keychain -d user | sed 's/"//g')
      - name: Install provisioning profile
        if: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 != '' }}
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/navy_encrypt.mobileprovision"
      - name: Flutter pub get
        run: flutter pub get
      - name: Build iOS IPA
        env:
          COCOAPODS_DISABLE_STATS: 'true'
        run: flutter build ipa --release --export-options-plist ios/export_options_enterprise.plist
      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/ipa/*.ipa

  windows:
    name: Windows build
    runs-on: windows-latest
    needs: lint
    env:
      ENV_FILE: ${{ secrets.ENV_FILE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
      - name: Prepare environment file
        shell: pwsh
        run: |
          if ($env:ENV_FILE) {
            $env:ENV_FILE | Out-File -FilePath .env -Encoding utf8
          } else {
            Copy-Item .env.example .env
          }
      - name: Flutter pub get
        shell: pwsh
        run: flutter pub get
      - name: Build Windows runner
        shell: pwsh
        run: |
          ./tools/build_windows.ps1 -BuildMode release
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/windows/runner/Release
            windows_installer/Output

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [android, ios, windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Generate release notes
        run: |
          python3 - <<'PY'
import os
import re
from pathlib import Path

ref = os.environ.get('GITHUB_REF', '')
tag = ref.split('/')[-1]
version = tag.lstrip('v')
content = Path('CHANGELOG.md').read_text()
pattern = re.compile(r'^## \[(?P<version>[^\]]+)\].*?(?=^## \[|\Z)', re.M | re.S)
notes = None
for match in pattern.finditer(content):
    if match.group('version') == version:
        notes = match.group(0).strip()
        break
if notes is None:
    notes = f'Release {version}'
Path('release_notes.md').write_text(notes)
PY
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          files: |
            dist/android-apk/*.apk
            dist/ios-ipa/*.ipa
            dist/windows-build/**
