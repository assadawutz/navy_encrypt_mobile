name: Release Build

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag (e.g. v4.2.0) that matches the top entry of CHANGELOG.md'
        required: true
      upload_android:
        description: 'Build Android release APK'
        required: false
        default: 'true'
      upload_ios:
        description: 'Build iOS enterprise IPA'
        required: false
        default: 'true'
      upload_windows:
        description: 'Build Windows release zip'
        required: false
        default: 'true'
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: '3.3.8'
  FLUTTER_CHANNEL: 'stable'

jobs:
  release-metadata:
    name: Validate release metadata
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.determine-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine release tag
        id: determine-tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG='${{ github.event.inputs.release_tag }}'
            if [[ -z "${TAG}" ]]; then
              echo 'release_tag input is required when manually dispatching.'
              exit 1
            fi
          else
            TAG="${GITHUB_REF_NAME}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Ensure changelog entry matches tag
        shell: bash
        run: |
          TAG='${{ steps.determine-tag.outputs.tag }}'
          CLEAN_TAG="${TAG#v}"
          TOP_CHANGELOG_ENTRY=$(grep -m1 '^## \[' CHANGELOG.md | sed -E 's/^## \[([^]]+)\].*/\1/')
          if [[ -z "${TOP_CHANGELOG_ENTRY}" ]]; then
            echo 'Unable to read the top entry from CHANGELOG.md'
            exit 1
          fi
          if [[ "${CLEAN_TAG}" != "${TOP_CHANGELOG_ENTRY}" ]]; then
            echo "Top changelog entry (${TOP_CHANGELOG_ENTRY}) does not match release tag ${CLEAN_TAG}" >&2
            exit 1
          fi

  android-release:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.upload_android == 'true'
    name: Android release APK
    runs-on: ubuntu-latest
    needs: release-metadata
    env:
      RELEASE_TAG: ${{ needs.release-metadata.outputs.release_tag }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      KEYSTORE_PATH: ${{ runner.temp }}/release.keystore
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Validate Android signing inputs
        shell: bash
        run: |
          if [[ -z "${ANDROID_KEYSTORE_BASE64}" || -z "${ANDROID_KEYSTORE_PASSWORD}" || -z "${ANDROID_KEY_ALIAS}" || -z "${ANDROID_KEY_PASSWORD}" ]]; then
            echo 'Android signing secrets are missing. Configure ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD.'
            exit 1
          fi

      - name: Prepare Android signing files
        shell: bash
        run: |
          echo "${ANDROID_KEYSTORE_BASE64}" | base64 --decode > "${KEYSTORE_PATH}"
          {
            echo "ANDROID_KEYSTORE_PASSWORD=${ANDROID_KEYSTORE_PASSWORD}"
            echo "ANDROID_KEY_PASSWORD=${ANDROID_KEY_PASSWORD}"
            echo "ANDROID_KEY_ALIAS=${ANDROID_KEY_ALIAS}"
            echo "ANDROID_KEYSTORE_PATH=${KEYSTORE_PATH}"
          } >> "$GITHUB_ENV"

      - name: Install dependencies
        run: flutter pub get

      - name: Build release APK
        run: flutter build apk --release --no-pub

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error

  ios-release:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.upload_ios == 'true'
    name: iOS enterprise IPA
    runs-on: macos-latest
    needs: release-metadata
    env:
      RELEASE_TAG: ${{ needs.release-metadata.outputs.release_tag }}
      IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_ENTERPRISE_CERT_P12_BASE64 }}
      IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_ENTERPRISE_CERT_PASSWORD }}
      IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_ENTERPRISE_PROFILE_BASE64 }}
      IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      EXPORT_OPTIONS: ios/export_options_enterprise.plist
      KEYCHAIN_PATH: ${{ runner.temp }}/build.keychain-db
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure iOS directory exists
        shell: bash
        run: |
          if [[ ! -d ios ]]; then
            echo 'Missing ios platform directory. Add Flutter iOS project files before running the release flow.'
            exit 1
          fi

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Install dependencies
        run: flutter pub get

      - name: Generate iOS assets
        run: flutter pub run tool/generate_apple_assets.dart

      - name: Validate iOS signing inputs
        shell: bash
        run: |
          if [[ -z "${IOS_CERTIFICATE_BASE64}" || -z "${IOS_CERTIFICATE_PASSWORD}" || -z "${IOS_PROVISIONING_PROFILE_BASE64}" ]]; then
            echo 'iOS enterprise signing secrets are missing. Configure IOS_ENTERPRISE_CERT_P12_BASE64, IOS_ENTERPRISE_CERT_PASSWORD, IOS_ENTERPRISE_PROFILE_BASE64.'
            exit 1
          fi
          if [[ -z "${IOS_KEYCHAIN_PASSWORD}" ]]; then
            echo 'IOS_KEYCHAIN_PASSWORD secret is required to create the temporary keychain.'
            exit 1
          fi

      - name: Configure temporary keychain
        shell: bash
        run: |
          security create-keychain -p "${IOS_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security list-keychain -d user -s "${KEYCHAIN_PATH}" ~/Library/Keychains/login.keychain-db
          security unlock-keychain -p "${IOS_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"

      - name: Import enterprise certificate
        shell: bash
        run: |
          CERT_PATH="${RUNNER_TEMP}/enterprise_cert.p12"
          echo "${IOS_CERTIFICATE_BASE64}" | base64 --decode > "${CERT_PATH}"
          security import "${CERT_PATH}" -k "${KEYCHAIN_PATH}" -P "${IOS_CERTIFICATE_PASSWORD}" -A -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "${IOS_KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"

      - name: Install provisioning profile
        shell: bash
        run: |
          PROFILE_PATH="${RUNNER_TEMP}/enterprise_profile.mobileprovision"
          echo "${IOS_PROVISIONING_PROFILE_BASE64}" | base64 --decode > "${PROFILE_PATH}"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "${PROFILE_PATH}")
          cp "${PROFILE_PATH}" "${HOME}/Library/MobileDevice/Provisioning Profiles/${UUID}.mobileprovision"

      - name: Build enterprise IPA
        env:
          FLUTTER_BUILD_NAME: ${{ env.RELEASE_TAG }}
        run: flutter build ipa --release --no-pub --no-codesign --export-options-plist "${EXPORT_OPTIONS}"

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-enterprise-ipa
          path: build/ios/ipa/*.ipa
          if-no-files-found: error

      - name: Cleanup keychain
        if: always()
        shell: bash
        run: |
          security delete-keychain "${KEYCHAIN_PATH}" || true

  windows-release:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.upload_windows == 'true'
    name: Windows release zip
    runs-on: windows-latest
    needs: release-metadata
    env:
      RELEASE_TAG: ${{ needs.release-metadata.outputs.release_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: ${{ env.FLUTTER_CHANNEL }}

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows release package
        shell: pwsh
        run: |
          ./windows/scripts/package_release.ps1 -FlutterExecutable flutter -BuildMode release -OutputDirectory "build/windows_release"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-zip
          path: build/windows_release.zip
          if-no-files-found: error
