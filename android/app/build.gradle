ext {
    kotlin_version = '1.7.10'
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

def releaseSigningConfigured = false

def envProperties = new Properties()
def dotenvFile = rootProject.file('../.env')
if (dotenvFile.exists()) {
    dotenvFile.withReader('UTF-8') { reader ->
        envProperties.load(reader)
    }
}

String resolveSecret(String rawValue) {
    if (rawValue == null) {
        return null
    }
    def matcher = rawValue =~ /^ENV\[(.+)\]$/
    if (matcher.matches()) {
        def key = matcher.group(1)
        def envValue = System.getenv(key)
        if (envValue != null && !envValue.trim().isEmpty()) {
            return envValue.trim()
        }
        if (envProperties.containsKey(key)) {
            return envProperties.getProperty(key)
        }
        return null
    }
    return rawValue
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "th.mi.navy.navy_encrypt"

    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "th.mi.navy.navy_encrypt"
        minSdkVersion 28
        targetSdkVersion 34
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                def keyAliasValue = resolveSecret(keystoreProperties['keyAlias'])
                def keyPasswordValue = resolveSecret(keystoreProperties['keyPassword'])
                def storePasswordValue = resolveSecret(keystoreProperties['storePassword'])
                def storeFilePath = resolveSecret(keystoreProperties['storeFile']) ?: 'app/release.keystore'

                if (keyAliasValue && keyPasswordValue && storePasswordValue) {
                    keyAlias keyAliasValue
                    keyPassword keyPasswordValue
                    storePassword storePasswordValue
                    storeFile rootProject.file(storeFilePath)
                    releaseSigningConfigured = true
                }
            }
        }
    }
    buildTypes {
        release {
            if (releaseSigningConfigured) {
                signingConfig signingConfigs.release
            } else {
                println('⚠️  Release signing is not fully configured. Falling back to the debug keystore.')
                signingConfig signingConfigs.debug
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    buildFeatures {
        viewBinding true
    }
    viewBinding {
        enabled true
    }
    buildToolsVersion '34.0.0'
}

flutter {
    source '../..'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10'
}
